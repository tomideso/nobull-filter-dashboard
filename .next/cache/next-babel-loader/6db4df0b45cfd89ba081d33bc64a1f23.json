{"ast":null,"code":"import Error from \"next/error\";\nimport Router from \"next/router\";\nexport default Error;\n\nError.getInitialProps = ({\n  res,\n  err,\n  asPath\n}) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;\n\n  if (statusCode && statusCode === 404) {\n    if (asPath.match(/\\/$/)) {\n      const withoutTrailingSlash = asPath.substr(0, asPath.length - 1);\n\n      if (res) {\n        res.writeHead(302, {\n          Location: withoutTrailingSlash\n        });\n        res.end();\n      } else {\n        Router.push(withoutTrailingSlash);\n      }\n    }\n  }\n\n  return {\n    statusCode\n  };\n}; // add this to nginx\n// rewrite ^(.+)/+$ $1 permanent;\n// MyError.getInitialProps = async ({ res, err, asPath }) => {\n//     // Capture 404 of pages with traling slash and redirect them\n//     const statusCode = res \n//       ? res.statusCode\n//       : (err ? err.statusCode : 404);\n//     if (statusCode && statusCode === 404) {\n//       const [path, query = ''] = asPath.split('?');                                                                                                                                                                                             \n//       if (path.match(/\\/$/)) {\n//         const withoutTrailingSlash = path.substr(0, path.length - 1); \n//         if (res) {\n//           res.writeHead(302, {\n//             Location: `${withoutTrailingSlash}${query ? `?${query}` : ''}`,\n//           }); \n//           res.end();\n//         } else {\n//           Router.push(`${withoutTrailingSlash}${query ? `?${query}` : ''}`);\n//         }   \n//       }   \n//     }","map":{"version":3,"sources":["/home/tomide/Project/No-Bull/Dashboard/pages/_error.js"],"names":["Error","Router","getInitialProps","res","err","asPath","statusCode","match","withoutTrailingSlash","substr","length","writeHead","Location","end","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,eAAeD,KAAf;;AAEAA,KAAK,CAACE,eAAN,GAAwB,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,GAAP;AAAYC,EAAAA;AAAZ,CAAD,KAA0B;AAChD,QAAMC,UAAU,GAAGH,GAAG,GAAGA,GAAG,CAACG,UAAP,GAAoBF,GAAG,GAAGA,GAAG,CAACE,UAAP,GAAoB,GAAjE;;AAEA,MAAIA,UAAU,IAAIA,UAAU,KAAK,GAAjC,EAAsC;AACpC,QAAID,MAAM,CAACE,KAAP,CAAa,KAAb,CAAJ,EAAyB;AACvB,YAAMC,oBAAoB,GAAGH,MAAM,CAACI,MAAP,CAAc,CAAd,EAAiBJ,MAAM,CAACK,MAAP,GAAgB,CAAjC,CAA7B;;AACA,UAAIP,GAAJ,EAAS;AACPA,QAAAA,GAAG,CAACQ,SAAJ,CAAc,GAAd,EAAmB;AACjBC,UAAAA,QAAQ,EAAEJ;AADO,SAAnB;AAGAL,QAAAA,GAAG,CAACU,GAAJ;AACD,OALD,MAKO;AACLZ,QAAAA,MAAM,CAACa,IAAP,CAAYN,oBAAZ;AACD;AACF;AACF;;AAED,SAAO;AAAEF,IAAAA;AAAF,GAAP;AACD,CAlBD,C,CAqBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Error from \"next/error\";\nimport Router from \"next/router\";\n\nexport default Error;\n\nError.getInitialProps = ({ res, err, asPath }) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;\n\n  if (statusCode && statusCode === 404) {\n    if (asPath.match(/\\/$/)) {\n      const withoutTrailingSlash = asPath.substr(0, asPath.length - 1);\n      if (res) {\n        res.writeHead(302, {\n          Location: withoutTrailingSlash\n        });\n        res.end();\n      } else {\n        Router.push(withoutTrailingSlash);\n      }\n    }\n  }\n\n  return { statusCode };\n};\n\n\n// add this to nginx\n// rewrite ^(.+)/+$ $1 permanent;\n\n// MyError.getInitialProps = async ({ res, err, asPath }) => {\n//     // Capture 404 of pages with traling slash and redirect them\n//     const statusCode = res \n//       ? res.statusCode\n//       : (err ? err.statusCode : 404);\n  \n//     if (statusCode && statusCode === 404) {\n//       const [path, query = ''] = asPath.split('?');                                                                                                                                                                                             \n//       if (path.match(/\\/$/)) {\n//         const withoutTrailingSlash = path.substr(0, path.length - 1); \n//         if (res) {\n//           res.writeHead(302, {\n//             Location: `${withoutTrailingSlash}${query ? `?${query}` : ''}`,\n//           }); \n//           res.end();\n//         } else {\n//           Router.push(`${withoutTrailingSlash}${query ? `?${query}` : ''}`);\n//         }   \n//       }   \n//     }"]},"metadata":{},"sourceType":"module"}